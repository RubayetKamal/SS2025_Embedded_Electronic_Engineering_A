<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC "-//Uppaal Team//DTD Flat System 1.1//EN" "http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd">
<nta>

<!-- ======= GLOBAL DECLARATIONS ======= -->
<declaration>
// Number of tasks
const int N = 4;

// Task parameters
int period[N] = {5, 7, 9, 10};
int deadline[N] = {5, 7, 9, 10};
int wcet[N] = {2, 2, 2, 1};

// Task state
bool ready[N];
int remaining_time[N];
int next_release[N];
int abs_deadline[N];

// Task management
int running_task = -1; // -1 = no task running

// Clocks for each task
clock clk[N];

// Channel to start tasks
broadcast chan start_task[N];
broadcast chan finish_task[N];
</declaration>

<!-- ======= TASK TEMPLATE ======= -->
<template>
  <name>EDF</name>
  <parameter>const int i</parameter>
  <declaration>
    clock t;
  </declaration>

  <location id="id0" x="0" y="0">
    <name x="0" y="-20">Idle</name>
  </location>
  <location id="id1" x="200" y="0">
    <name x="200" y="-20">Ready</name>
  </location>
  <location id="id2" x="400" y="0">
    <name x="400" y="-20">Running</name>
  </location>

  <init ref="id0"/>

  <!-- Periodic Release -->
  <transition>
    <source ref="id0"/>
    <target ref="id1"/>
    <label kind="guard">clk[i] &gt;= next_release[i]</label>
    <label kind="assignment">
      ready[i] = true,
      remaining_time[i] = wcet[i],
      abs_deadline[i] = clk[i] + deadline[i],
      next_release[i] = clk[i] + period[i]
    </label>
  </transition>

  <!-- Start Running -->
  <transition>
    <source ref="id1"/>
    <target ref="id2"/>
    <label kind="synchronisation">start_task[i]?</label>
    <label kind="guard">ready[i] &amp;&amp; running_task == i</label>
    <label kind="assignment">
      ready[i] = false;
      t = 0;
    </label>
  </transition>

  <!-- Finish Running -->
  <transition>
    <source ref="id2"/>
    <target ref="id0"/>
    <label kind="guard">t &gt;= wcet[i]</label>
    <label kind="assignment">running_task = -1</label>
    <label kind="synchronisation">finish_task[i]!</label>
  </transition>
</template>

<!-- ======= CORE (SCHEDULER) TEMPLATE ======= -->
<template>
  <name>Core</name>
  <location id="id0" x="0" y="0">
    <name x="0" y="-20">Wait</name>
  </location>
  <init ref="id0"/>

  <transition>
    <source ref="id0"/>
    <target ref="id0"/>
    <label kind="assignment">
  min_deadline = 9999;
  selected = -1;
  for (int j = 0; j &lt; N; j++) {
    if (ready[j] &amp;&amp; abs_deadline[j] &lt; min_deadline) {
      min_deadline = abs_deadline[j];
      selected = j;
    }
  }
  if (selected &gt;= 0) {
    running_task = selected;
  }
</label>
    <label kind="guard">running_task == -1</label>
    <label kind="synchronisation">start_task[running_task]!</label>
  </transition>
</template>

<!-- ======= TIME ADVANCER TEMPLATE ======= -->
<template>
  <name>TimeAdvancer</name>
  <location id="id0" x="0" y="0">
    <name x="0" y="-20">Advance</name>
  </location>
  <init ref="id0"/>
</template>

<!-- ======= SYSTEM DECLARATION ======= -->
<system>
EDF0 = EDF(0);
EDF1 = EDF(1);
EDF2 = EDF(2);
EDF3 = EDF(3);
core = Core();
timer = TimeAdvancer();
system EDF0, EDF1, EDF2, EDF3, core, timer;
</system>

<!-- ======= QUERIES ======= -->
<queries>
  <query>
    <formula>A[] not deadlock</formula>
    <comment>Ensure no deadlocks occur</comment>
  </query>
  <query>
    <formula>A[] forall (i:int[0,N-1]) clk[i] &lt;= abs_deadline[i]</formula>
    <comment>All tasks meet deadlines</comment>
  </query>
</queries>

</nta>
